name: Mykrobe builds

on:
  push:
    tags:
    - 'v*.*.*'
    branches:
      - pyvcf
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_containers:
    name: Build containers
    runs-on: ubuntu-20.04
    steps:

    - name: Set up Go 1.16
      uses: actions/setup-go@v1
      with:
        go-version: 1.16
      id: go

    - name: Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
          build-essential \
          libssl-dev \
          uuid-dev \
          libgpgme11-dev \
          squashfs-tools \
          libseccomp-dev \
          pkg-config \
          debootstrap \
          debian-keyring \
          debian-archive-keyring \
          rsync

    - name: Install Singularity
      env:
        SINGULARITY_VERSION: 3.5.3
        GOPATH: /tmp/go
      run: |
        mkdir -p $GOPATH
        sudo mkdir -p /usr/local/var/singularity/mnt
        mkdir -p $GOPATH/src/github.com/sylabs
        cd $GOPATH/src/github.com/sylabs
        wget https://github.com/hpcng/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-${SINGULARITY_VERSION}.tar.gz
        tar -xzf singularity-${SINGULARITY_VERSION}.tar.gz
        cd singularity
        ./mconfig -v -p /usr/local
        make -j `nproc 2>/dev/null || echo 1` -C ./builddir all
        sudo make -C ./builddir install


    - name: Check out code for the container build
      uses: actions/checkout@v2

    - name: Set release version if is a release
      if: startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Set release version if not a release
      if: false == startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=test" >> $GITHUB_ENV

    - name: Build Singularity container
      env:
        SINGULARITY_RECIPE: Singularity.def
        OUTPUT_CONTAINER: mykrobe_${{env.RELEASE_VERSION}}.img
      run: |
        ls
        if [ -f "${SINGULARITY_RECIPE}" ]; then
            sudo -E singularity build ${OUTPUT_CONTAINER} ${SINGULARITY_RECIPE}
        else
            echo "${SINGULARITY_RECIPE} is not found."
            echo "Present working directory: $PWD"
            ls
        fi

    - name: Release
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: mykrobe*.img
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to github container registry
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      if: startsWith(github.event.ref, 'refs/tags/v')
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  mac_build:
    name: Build mac os command line
    runs-on: macos-11
    steps:

    - name: Install dependencies
      run: |
        pip3 install cython requests wheel tox pyinstaller

    - name: Check out code for the build
      uses: actions/checkout@v2

    - name: Set release version if is a release
      if: startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Set release version if not a release
      if: false == startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=test" >> $GITHUB_ENV

    - name: Test and build command line tarball
      env:
        OUTPUT_TARBALL: mykrobe.command_line.osx.${{env.RELEASE_VERSION}}.tar.gz
      run: |
        # mongod default data directory is /data/db, which is not writeable.
        mkdir $HOME/mongodb_data
        chown -R `id -un` $HOME/mongodb_data
        sudo mongod --dbpath=$HOME/mongodb_data --quiet &> /dev/null &
        sleep 3s
        rm -rf .tox
        sudo tox
        sudo pip3 install .
        mykrobe panels update_metadata --panels_dir src/mykrobe/data
        mykrobe panels update_species --panels_dir src/mykrobe/data --debug all
        cd dist
        pyinstaller --workpath='./pyinstaller_build/binary_cache' --distpath='./pyinstaller_build' mykrobe_atlas_pyinstaller.spec
        cd pyinstaller_build
        tar cvfz ../../${OUTPUT_TARBALL} mykrobe_atlas/

    - name: Release
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: mykrobe.command_line.osx.*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows_build:
    name: Build Windows command line
    runs-on: windows-2019
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          autotools git gcc python python-pip python-devel zlib-devel libcurl-devel bzip2 liblzma zip libbz2-devel xz zlib zlib-devel libtool wget liblzma-devel ncurses-devel base-devel openssl-devel mingw-w64-x86_64-python-pywin32


    - name: Install dependencies
      run: |
        pip3 install wheel
        echo "pip3 install cython requests tox pefile pyinstaller==4.9"
        pip3 install cython requests tox pefile pyinstaller==4.9

      shell: msys2 {0}

    - name: Check out code for the build
      uses: actions/checkout@v2

    - name: Set release version if is a release
      if: startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      shell: msys2 {0}

    - name: Set release version if not a release
      if: false == startsWith(github.event.ref, 'refs/tags/v')
      run: echo "RELEASE_VERSION=test" >> $GITHUB_ENV
      shell: msys2 {0}

    - name: Test and build command line tarball
      env:
        OUTPUT_TARBALL: mykrobe.command_line.windows.${{env.RELEASE_VERSION}}.tar.gz
      run: |
        echo "clone mccortex"
        rm -rf mccortex
        git clone --recursive -b geno_kmer_count https://github.com/phelimb/mccortex
        cd mccortex/libs/htslib
        git checkout bcf9bff178f81c9c1cf3a052aeb6cbe32fe5fdcc
        cd ../bcftools
        git checkout b406a3906b153faa8bec0a53df07b2adf18a3052
        cd ../samtools
        git checkout 2d4907cf9a34ccf7cde60143158b39e1cb40ac0c
        cd ../../../
        python3 ./ci/windows_file_fixes.py
        cd mccortex
        echo "make mccortex"
        make all
        echo "make tests mccortex"
        make tests
        cd ..
        #echo "which pip3"
        #which pip3
        #echo "pip3 cache dir"
        #pip3 cache dir
        #echo "pip3 cache purge"
        #pip3 cache purge
        #rm -rf .tox
        echo "tox"
        tox
        #echo "python install eunsurepip etc"
        #python -m ensurepip
        #python -m pip install pypiwin32 numpy==1.15
        #python -m pip install pyinstaller
        #python -m pip install -r requirements.txt
        echo "pip3 install requirements"
        pip3 install -r requirements.txt
        echo "pip3 install ."
        pip3 install .
        echo "update panels"
        mykrobe panels update_metadata --panels_dir src/mykrobe/data
        mykrobe panels update_species --panels_dir src/mykrobe/data --debug all
        cd dist
        pyinstaller --workpath='./pyinstaller_build/binary_cache' --distpath='./pyinstaller_build' mykrobe_atlas_pyinstaller_windows.spec
        cd pyinstaller_build
        tar cvfz ../../${OUTPUT_TARBALL} mykrobe_atlas/
      shell: msys2 {0}

    - name: Release
      if: startsWith(github.event.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: mykrobe.command_line.windows.*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

